#ifndef GEOMETRY_H_INCLUDED
#define GEOMETRY_H_INCLUDED
const int INF = 1e9;
struct circle{
    circle(){}
    circle(double x_, double y_, double r_=0):x(x_),y(y_),r(r_){}
    circle(const circle& c){x=c.x;y=c.y;r=c.r;}
    double x,y,r;

    void print(){
        printf("X: %f Y: %f R: %f\n",x,y,r);
    }
};
// get two (or one) circles generated by two points and r
vector<circle> getCircle(Point a,Point b,double r){
    vector<circle> res;
    double dx=a.x-b.x,dy=a.y-b.y;
    double dis=sqrt(dx*dx+dy*dy);
    double mx=(a.x+b.x)/2,my=(a.y+b.y)/2;
    double dis2=sqrt(r*r-(dis/2)*(dis/2));
    double theta=fabs(atan2(dy,dx));
    double x1=mx+dis2*sin(theta);
    double y1=my-dis2*cos(theta);
    double x2=mx-dis2*sin(theta);
    double y2=my+dis2*cos(theta);
    if(dis2==0){
        res.push_back(circle(x1,y1));
    }else{
        res.push_back(circle(x1,y1));
        res.push_back(circle(x2,y2));
    }
    return res;
}
//generate entering circle and leaving circle of point b from center a
// and add them to vector v
void add2point(Point a,Point b,double r, int num, vector<pair<double,int> >& v){
    double dx=b.x-b.x,dy=b.y-a.y;
    double dis=sqrt(dx*dx+dy*dy);
    double mx=(a.x+b.x)/2,my=(a.y+b.y)/2;
    double dis2=sqrt(r*r-(dis/2)*(dis/2));
    double theta=fabs(atan2(dy,dx));
    double x1=mx+dis2*sin(theta);
    double y1=my-dis2*cos(theta);
    double x2=mx-dis2*sin(theta);
    double y2=my+dis2*cos(theta);
    double p1=atan2(x1,y1);
    double p2=atan2(x2,y2);
    if(p1>p2)swap(p1,p2);
    //if(p2-p1>)
    //entering circle
    v.push_back(make_pair(p1,num));
    //leaving circle
    v.push_back(make_pair(p2,num+INF));
}


#endif // GEOMETRY_H_INCLUDED
